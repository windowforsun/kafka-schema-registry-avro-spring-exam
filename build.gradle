plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.4'
    id 'com.google.cloud.tools.jib' version '3.2.0'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
sourceCompatibility = '11'
version 'v1'

ext {
    springCloudVersion = '2021.0.2'
}
repositories {
    mavenCentral()
    maven {
        url 'https://packages.confluent.io/maven/'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-clients'
    implementation 'org.hibernate.validator:hibernate-validator:6.0.18.Final'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'javax.validation:validation-api'
    implementation 'org.apache.avro:avro:1.11.1'
    implementation 'io.confluent:kafka-avro-serializer:5.5.5'
    // logback 충돌로 주석 처리
//    implementation "org.apache.avro:avro-tools:1.11.0"
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.8.1'
    testImplementation 'org.awaitility:awaitility:3.0.0'
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.awaitility:awaitility'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}
